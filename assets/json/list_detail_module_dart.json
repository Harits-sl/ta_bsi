[
  {
    "id": "materi-1",
    "nama_materi": "Sejarah Dart",
    "materi": "<div><img src='asset:assets/images/module/dart_comment.png'/></div><div><p>Dart merupakan bahasa pemrograman yang dikembangkan oleh google untuk kebutuhan dalam membuat aplikasi android atau  mobile, front-end, web, IoT, back-end (CLI), dan Game.</p></div><div><p>Dart menerapkan konsep pemrograman berorientasi objek (OOP) dimana struktur kode berada dalam class yang didalamnyaberisi method maupun variabel.</p></div><div><p>Dart sendiri menggunakan C-Style syntax sehingga mekanisme dart mirip dengan bahasa pemrograman C, java,javascript, dan Swift.</p></div><div><p>Dart awalnya dikenalkan pada GOTO conference pada tahun 2012.</p></div><div><p>Project ini didirikan oleh Lars Bak dan Kasper Lund dari Google, sampai akhirnya versi Dart 1.0 dirilis pada 14November 2013.</p></div><div><p>Bulan Agustus 2018, Dart 2.0 dirilis dengan perubahan bahasa seperti perubahan type system.</p></div><div><p>Jauh sebelum ada Flutter, Dart awalnya digunakan untuk membuat web yang ada di Google. Tujuan awal pembuatan Dartadalah untuk menggantikan JavaScript yang dinilai memiliki banyak kelemahan.</p></div><div><p>Sejak saat itu, rilisnya Flutter SDK untuk pengembangan iOS, Android, dan web menjadi sorotan baru pada bahasaDart.</p></div>"
  },
  {
    "id": "materi-2",
    "nama_materi": "Kenapa perlu belajar Dart",
    "materi": "<div> <p>Bahasa pemrograman ini dikembangkan untuk mudah digunakan dalam pengembangan, sesuai dengan pengembangan aplikasi modern. dan memiliki implementasi berkinerja tinggi.</p> </div> <div> <p>Lalu adakah alasan yang bagus untuk memulai belajar pemrograman dengan Dart?</p> </div> <div> <p>- Bahasa Dart dirancang supaya familier dengan bahasa pemrograman lain sehingga mudah bagi yang sudah mengerti bahasa pemrograman lain maupun bagi yang baru memulai perjalanannya sebagai developer. </p> </div> <div> <p>- Penggunaan bahasa Dart itu gratis (open source) dan dikembangkan oleh komunitas developer ahli yang aktif dan terbuka. </p> </div> <div> <p>Dengan Dart, Anda hanya perlu satu codebase untuk dapat mengembangkan aplikasi pada berbagai platform seperti web, Android, dan iOS. </p> </div> "
  },
  {
    "id": "materi-3",
    "nama_materi": "Karakteristik Dart",
    "materi": "<div> <p>Dart memiliki banyak kemiripan dengan bahasa lain yang sudah banyak dikenal seperti Java, C#, Javascript, Swift, dan Kotlin.</p> </div> <div> <p>Salah satu rancangan utama dari Dart adalah supaya bahasa ini familiar bagi developer Javascript dan Java/C#</p> </div> <div> <p>Artinya, yang telah familiar dengan kedua bahasa tersebut dapat memulai belajar bahasa Dart dengan lebih mudah.</p> </div> <div> <p>Namun, jika Anda adalah calon developer yang baru memulai belajar pemrograman dan memutuskan Dart sebagai first language, tenang saja. Dart adalah bahasa yang nyaman dan mudah dipelajari untuk memulai pemrograman.</p> </div> <div> <img src='asset:assets/images/module/dart_karakteristik.png'> </div> <div> <p>Jika Anda telah familiar dengan bahasa pemrograman lain seperti Java, Kotlin, atau Swift, tentu Anda telah paham bagaimana kode di atas bekerja. Jadi, kode di atas akan menampilkan “Hello World. Welcome to Dart!” pada konsol.</p> </div> <div> <p>Dart sebagai bahasa memiliki beberapa karakteristik berikut:</p> </div> <div> <p>Statically typed\n,Type inference\n,String expressions\n,Multi-paradigm: OOP & Functional.</p> </div>"
  },
  {
    "id": "materi-4",
    "nama_materi": "Comments",
    "materi": "<div> <p>Sebuah komentar akan dilewatkan ketika proses kompilasi, sehingga tidak akan memengaruhi alur program yang kita tulis.</p> </div> <div> <p>Komentar bisa digunakan sebagai dokumentasi yang menjelaskan kode yang kita tulis.</p> </div> <div> <p>Terdapat tiga jenis komentar yang bisa digunakan pada Dart.</p> </div> <div><img src='asset:assets/images/module/dart_comment.png'/></div> <div> <p>Pertama adalah single-line comment atau komentar satu baris yang diawali dengan tanda // dan berakhir pada akhir baris tersebut.</p> </div> <div> <p>Kedua adalah multi line comment, atau komentar untuk lebih dari satu baris</p> </div> <div> <p>ketiga adalah document comment, untuk mendokumentasikan type atau variable</p> </div>"
  },
  {
    "id": "materi-5",
    "nama_materi": "Variables",
    "materi": "<div> <p>Variabel adalah suatu tempat yang digunakan untuk menampung data atau konstanta di memori yang mempunyai nilai yang dapat berubah–ubah selama proses program.</p> </div> <div> <p>Pada Dart mendefinisikan sebuah variabel dengan keyword var.</p> </div> <div> <p><div><img src='asset:assets/images/module/dart_variable.png'/></div></p> </div> <div> <p>Variabel menyimpan referensi. Variabel bernama text berisi referensi ke objek String dengan nilai 'hello world'.</p> </div>"
  },
  {
    "id": "materi-6",
    "nama_materi": "Numbers",
    "materi": "<div> <p> Tipe data angka pada Dart dapat disimpan ke dalam dua jenis: int dan double. </p> </div> <div><img src='asset:assets/images/module/dart_number.png'/> </div> <div> <p>Pada int, tipe data yang dizinkan adalah angka dalam bentuk bilangan bulat. Sementara pada double, tipe data yagn diizinkan adalah angka dalam bentuk bilangan desimal.</p> </div>"
  },
  {
    "id": "materi-7",
    "nama_materi": "Strings",
    "materi": "<div><img src='asset:assets/images/module/dart_string.png'/> </div> <div> <p>String digunakan untuk menyimpan data dalam bentuk teks. String pada Dart dapat didefinisikan dengan menggunakan tanda petik satu maupun petik dua</p> </div>"
  },
  {
    "id": "materi-8",
    "nama_materi": "Booleans",
    "materi": "<div> <p>Tipe data boolean merupakan tipe yang memiliki dua nilai yaitu benar (true) atau salah (false).</p> </div> <div> <p>Nilai yang digunakan pada tipe ini sangat penting dalam mengambil keputusan suatu kejadian tertentu.</p> </div> <div><img src='asset:assets/images/module/dart_boolean.png'/> </div> <div> <p>Tanda ! di atas disebut dengan operator “not” atau “bang”. Operator ini berfungsi untuk menegasikan nilai boolean, sederhananya membalik nilai boolean. Misalnya !true sama saja bernilai false.</p> </div>"
  },
  {
    "id": "materi-9",
    "nama_materi": "operators",
    "materi": "<div> <p>Operator aritmatika</p> </div> <div><img src='asset:assets/images/module/dart_operator.png' /></div> <div> <p>Operator aritmatika yang digunakan untuk operasi seperti penjumlahan atau perkalian. Lihatlah contoh kode berikut: </p> </div> <div> <p>Operator perbandingan</p> </div> <div><img src='asset:assets/images/module/dart_operator1.png' /></div> <div> <p>Operasi perbandingan untuk membandingkan nilai-nilai yang dijadikan sebagai operands. Berikut ini adalah contoh operator perbandingan pada Dart:</p> </div> "
  },
  {
    "id": "materi-10",
    "nama_materi": "Apa itu Function",
    "materi": "<div> <p>Functions pada Dart digunakan untuk menghasilkan output berdasarkan input tertentu yang diberikan, selain itu juga sebagai blok kode atau prosedur yang dapat digunakan kembali.</p> </div> <div> <p>Semua program Dart dimulai dari fungsi main(). main() adalah contoh fungsi utama yang selalu kita gunakan.</p> </div> <div> <p>Selain itu, print() juga termasuk fungsi.</p> </div> <div> <p>Fungsi print() akan mengambil nilai String atau objek lainnya dan menampilkannya ke konsol.</p> </div> <div> <p>Untuk mendeklarasikan fungsi, caranya sama dengan penulisan fungsi main() yaitu dengan menentukan tipe nilai balik atau return value lalu nama fungsi dan parameterinputnya.</p> </div> <div><img src='asset:assets/images/module/dart_apa_itu_function.png' /></div> <div> <p>Setiap fungsi Dart selalu mengembalikan nilai. Namun ada satu tipe data khusus yang bisa kita lihat pada fungsi main yaitu return type void.</p> </div> <div> <p>Keyword void berarti fungsi tersebut tidak menghasilkan output atau nilai kembali. Biasanya fungsi seperti ini digunakan untuk kumpulan instruksi atau prosedur yang berulang dan sering digunakan.</p> </div> <div><img src='asset:assets/images/module/dart_apa_itu_function1.png' /></div> <div> <p>Pada contoh sederhana di atas fungsi greet() memang belum menghemat banyak kode yang Anda tulis. Namun, apabila Anda memiliki 30 instruksi greet dan ternyata versi terbaru aplikasi Anda memerlukan perubahan teks yang ditampilkan, Anda cukup ubah satu baris kode saja</p> </div> <div> <p>Function parameters</p> </div> <div> <p>Pada beberapa kasus fungsi bisa memerlukan input data untuk diproses. Input data ini kita kenal sebagai parameter.</p> </div> <div> <p>Untuk menambahkan parameter ke dalam fungsi, kita bisa memasukkannya ke dalam tanda kurung. Sebuah fungsi bisa menerima nol, satu, atau beberapa parameter.Z</p> </div> <div><img src='asset:assets/images/module/dart_apa_itu_function2.png' /></div> <div> <p>Gambar diatas merupakan contoh fungsi dengan 2 parameter</p> </div> <div> <p>Sebuah fungsi juga bisa menghasilkan output atau mengembalikan nilai. Fungsi yang mengembalikan nilai ditandai dengan definisi return type selain void dan memiliki keywordreturn. Contohnya seperti berikut:</p> </div> <div><img src='asset:assets/images/module/dart_apa_itu_function3.png' /></div> "
  },
  {
    "id": "materi-11",
    "nama_materi": "If and Else Statement",
    "materi": "<div> <p>Ketika mengembangkan sebuah program, kita akan bertemu dengan alur yang bercabang tergantung kepada kondisi yang terjadi. Untuk mengakomodasi dan mengecek sebuah kondisi pada Dart kita menggunakan kata kunci if.</p> </div> <div> <p>Dalam pernyataan if memungkinkan kita untuk memasukkan sebuah kondisi di dalam kode yang kita buat, yakni jika pernyataan kondisi tersebut sudah terpenuhi maka kondisi tersebut yang akan dieksekusi.</p> </div> <div> <p>Sebaliknya, jika bernilai false maka proses yang ditentukan akan dilewatkan.</p> </div> <div><img src='asset:assets/images/module/dart_if_else.png' /></div> <div> <p>Didalam gambar jika dijalankan, akan memunculkan teks 'tulisan ini akan muncul jika variabel a adalah true'</p> </div> <div> <p>Jika variable a diubah nilainya menjadi false, maka pada console tidak akan memunculkan teks apapun</p> </div> <div> <p>If dan Else</p> </div> <div> <p>Lalu bagaimana jika Anda ingin melakukan operasi lain ketika kondisi bernilai false? Jawabannya adalah dengan menggunakan else.</p> </div> <div><img src='asset:assets/images/module/dart_if_else1.png' /></div> <div> <p>Didalam gambar jika dijalankan, akan memunculkan teks 'tulisan ini akan muncul jika variabel a adalah true'</p> </div> <div> <p>If - Else If - Else</p> </div> <div> <p>Anda juga dapat mengecek beberapa kondisi sekaligus dengan menggabungkan else dan if. Contohnya seperti program konversi nilai berikut:</p> </div> <div><img src='asset:assets/images/module/dart_if_else2.png' /></div> "
  },
  {
    "id": "materi-12",
    "nama_materi": "Switch Statement",
    "materi": "<div> <p>Sebelumnya kita telah mempelajari bagaimana mengondisikan logika komputer dengan menggunakan if.</p> </div> <div> <p>Namun, bagaimana jika ada banyak kondisi yang perlu dicek menggunakan if? Tentu akan membingungkan dan kode kita pun jadi sulit dibaca.</p> </div> <div> <p>Dart mendukung statement switch untuk melakukan pengecekan banyak kondisi dengan lebih mudah dan ringkas.</p> </div> <div><img src='asset:assets/images/module/dart_switch.png' /></div> <div> <p>Tanda kurung setelah keyword switch berisi variabel atau ekspresi yang akan dievaluasi. Kemudian untuk setiap kondisi yang mungkin terjadi kita masukkan keyword case diikuti dengan nilai yang valid.</p> </div> <div> <p>Jika kondisi pada case sama dengan variabel pada switch, maka blok kode setelah titik dua (:) akan dijalankan.</p> </div> <div> <p>Keyword break digunakan untuk keluar dari proses switch.</p> </div> <div> <p>Terdapat satu case bernama default yang memiliki fungsi yang sama dengan keyword else pada control flow if-else. Jika tidak ada nilai yang sama dengan variabel pada switch maka blok kode ini akan dijalankan.</p> </div> <div><img src='asset:assets/images/module/dart_switch1.png' /></div>"
  }
]